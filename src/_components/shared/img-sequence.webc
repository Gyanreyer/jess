<script webc:type="js" webc:root="override">
  const camelToKebabCase = (string) => {
    return string
      .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2")
      .toLowerCase();
  };

  const {
    dataImgWidth,
    dataImgHeight,
    style = "",
    ...passThroughAttributes
  } = webc.attributes;

  const spriteWidth = Number(dataImgWidth);
  const spriteHeight = Number(dataImgHeight);

  if (!spriteWidth || !spriteHeight) {
    throw new Error(
      "Please provide a data-img-width and data-img-height attributes."
    );
  }

  const attributesToRender = {};
  const filteredPublicAttributes = webc.filterPublicAttributes(webc.attributes);

  for (const key in filteredPublicAttributes) {
    if (key in passThroughAttributes) {
      attributesToRender[key] = passThroughAttributes[key];
    }
  }

  this.getImageSequenceSpritesheet(dir, spriteWidth, spriteHeight).then(
    ({ filePath, columnCount, rowCount, spriteCount }) => {
      return /* html */ `
  <img-sequence
    role="presentation"
    style="--spritesheet-url: url('${filePath}'); aspect-ratio: ${spriteWidth}/${spriteHeight}; --sprite-count: ${spriteCount}; --column-count: ${columnCount}; --row-count: ${rowCount};${style}"
    ${renderAttributes(attributesToRender)}
    ></img-sequence>`;
    }
  );
</script>
<script src="./img-sequence.js"></script>
<style>
  img-sequence {
    display: block;
    width: 100%;

    background-image: var(--spritesheet-url);

    background-repeat: no-repeat;
    background-size: calc(100% * var(--column-count));

    --cell: round(var(--progress) * (var(--sprite-count) - 1) + 1, 1);
    --row: round(up, calc(var(--cell) / var(--column-count)), 1);
    --column: calc(var(--cell) - (var(--row) - 1) * var(--column-count));
    background-position-x: calc(
      (var(--column, 1) - 1) * 100% / (var(--column-count, 1) - 1)
    );
    background-position-y: calc(
      (var(--row, 1) - 1) * 100% / (var(--row-count, 1) - 1)
    );

    transition: opacity 0.3s;
  }

  img-sequence[data-loading] {
    opacity: 0;
  }
</style>
